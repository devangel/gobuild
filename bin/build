#!/bin/bash

# fail fast
set -o errexit
set -o pipefail

# args
PROJECT="$1"

# determine root
root=$(cd $(dirname $0)/..; pwd)

# if there's no vendored go, download an appropriate one
if [[ ! -d $root/vendor/go ]]; then
  echo "Downloading go for $GOOS/$GOARCH"
  goroot="/tmp/goroot_XXXXX.vtQB8ZQ2" #$(mktemp -t goroot_XXXXX)
  #rm -rf $goroot
  #mkdir -p $goroot
  cd $goroot
  #https://storage.googleapis.com/golang/go1.3.3.linux-amd64.tar.gz
  #http://storage.googleapis.com/golang/go1.3.3.darwin-amd64.tar.gz
  #https://storage.googleapis.com/golang/go1.3.3.linux-amd64.tar.gz
  os="$((uname) | tr '[:upper:]' '[:lower:]')"

  if [ $os = "darwin" ]
  then
    extraarch="-osx10.8"
  else
    extraarch=
  fi
  echo "Curling https://${COMPILER_BUCKET}/golang/go${GOVERSION}.${os}-${GOARCH}${extraarch}.tar.gz"
  #curl -s https://${COMPILER_BUCKET}/golang/go${GOVERSION}.${os}-${GOARCH}${extraarch}.tar.gz | tar -xzf -
  export GOROOT="$goroot/go"
else
  echo "Using vendored go"
  export GOROOT="$root/vendor/go"
fi

# make a tempdir to build in
echo "Creating GOPATH"
gopath="/tmp/gopath_XXXXX.YAxyOn3i" # $(mktemp -t gopath_XXXXX)
#rm -rf $gopath
#mkdir -p $gopath

# some vars for go
export GOPATH="$gopath"
export PATH="$GOROOT/bin:/app/vendor/bin:$PATH"

if [[ "$KEY" != "" && "$SPAWN_ENV" != "local" ]]; then

  echo "Downloading key"
  mkdir -p ~/.ssh
  chmod 700 ~/.ssh
  curl -s $KEY -o ~/.ssh/id_rsa
  chmod 400 ~/.ssh/id_rsa

  echo "Disabling StrictHostKeyChecking"
  echo -e "Host github.com\n\tStrictHostKeyChecking no\n" >> ~/.ssh/config

  echo "Downloading $PROJECT"
  mkdir -p $GOPATH/src/$PROJECT
  cd $GOPATH/src/$PROJECT
  git clone git@${PROJECT/\//:}.git .

else

  echo "Downloading $PROJECT"
  #go get -d $PROJECT >/tmp/build.log

fi

cd $GOPATH/src/$PROJECT

# clone the specified ref
if [[ ! -z $REF ]]; then
  git fetch origin
  git checkout $REF
fi

# set up godeps
#if [ -f Godeps ]; then
  echo "Installing godep"
  env GOARCH= GOOS= go get github.com/tools/godep
  export PATH="$GOPATH/bin:$PATH"
#fi

echo "Compiling to echo $GOPATH/bin/$(echo $PROJECT | cut -d/ -f3)"
#make VERSION=$VERSION
godep go build -o "$GOPATH/bin/$(echo $PROJECT | cut -d/ -f3)"

if [ -d $GOPATH/bin/${GOOS}_${GOARCH} ]; then
  BINARY="$(ls -1 $GOPATH/bin/${GOOS}_${GOARCH}/$(echo $PROJECT | cut -d/ -f3)*)"
else
  BINARY="$GOPATH/bin/$(echo $PROJECT | cut -d/ -f3)"
fi

echo "Recording size"
SIZE=$(wc -c <$BINARY | tr -d ' ')
echo "Size is $SIZE"
echo "Posting Size to $BUILD_HOST/build/$BUILD_ID/size"
curl -s -X POST $BUILD_HOST/build/$BUILD_ID/size -d size=$SIZE >/dev/null

echo "Uploading binary"
curl -s -X POST $BUILD_HOST/build/$BUILD_ID/binary -T $BINARY
